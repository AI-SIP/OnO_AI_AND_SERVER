name: Build and Deploy to EC2 using GHCR

on: [] # trigger 발생 해제

env:
  AWS_S3_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
  AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ORG_NAME: AI-SIP
  DOCKER_IMAGE: ghcr.io/ai-sip/mvp_cv/dev-cv-image
  VERSION: ${{ github.sha }}
  NAME: dev-cv-container
  TAG: v1


jobs:

  build:
    name: Build
    runs-on: ubuntu-latest  
    steps:
      - name: Setup AWS S3 credentials
        run: |
          echo "AWS_S3_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_S3_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}" >> $GITHUB_ENV
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV

      - name: Checkout src code
        uses: actions/checkout@v4
      
      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.TAG }}
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-test ]
    steps:
    
      - name: Login to ghcr
        run: echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull Docker Image
        run: sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ env.TAG }}

      - name: Docker run
        run: |
          sudo docker stop ${{ env.NAME }} || true
          sudo docker rm ${{ env.NAME }} || true
          sudo docker run -d --name ${{ env.NAME }} -p 8000:8000 --restart always ${{ env.DOCKER_IMAGE }}:${{ env.TAG }}
          
          
